var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export var sample;
(function (sample) {
    var _Message_one_of_decls, _MessageResponse_one_of_decls;
    class Message extends pb_1.Message {
        constructor(data) {
            super();
            _Message_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _Message_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("topic" in data && data.topic != undefined) {
                    this.topic = data.topic;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get topic() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set topic(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0));
        }
        set key(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0));
        }
        set value(value) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data) {
            const message = new Message({});
            if (data.topic != null) {
                message.topic = data.topic;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.topic != null) {
                data.topic = this.topic;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.topic.length)
                writer.writeString(1, this.topic);
            if (this.key.length)
                writer.writeBytes(2, this.key);
            if (this.value.length)
                writer.writeBytes(3, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.topic = reader.readString();
                        break;
                    case 2:
                        message.key = reader.readBytes();
                        break;
                    case 3:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Message.deserialize(bytes);
        }
    }
    _Message_one_of_decls = new WeakMap();
    sample.Message = Message;
    class MessageResponse extends pb_1.Message {
        constructor(data) {
            super();
            _MessageResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _MessageResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false);
        }
        set success(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "");
        }
        set message(value) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data) {
            const message = new MessageResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return MessageResponse.deserialize(bytes);
        }
    }
    _MessageResponse_one_of_decls = new WeakMap();
    sample.MessageResponse = MessageResponse;
    class UnimplementedKafkaProducerService {
    }
    UnimplementedKafkaProducerService.definition = {
        produceMessage: {
            path: "/sample.KafkaProducer/produceMessage",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => Message.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => MessageResponse.deserialize(new Uint8Array(bytes))
        }
    };
    sample.UnimplementedKafkaProducerService = UnimplementedKafkaProducerService;
    class KafkaProducerClient extends grpc_1.makeGenericClientConstructor(UnimplementedKafkaProducerService.definition, "KafkaProducer", {}) {
        constructor(address, credentials, options) {
            super(address, credentials, options);
            this.produceMessage = (message, metadata, options, callback) => {
                return super.produceMessage(message, metadata, options, callback);
            };
        }
    }
    sample.KafkaProducerClient = KafkaProducerClient;
})(sample || (sample = {}));
//# sourceMappingURL=user.js.map